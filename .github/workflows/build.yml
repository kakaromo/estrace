name: 'build'

on:
  workflow_dispatch: # This is for manual triggers.
    inputs:
      platform:
        description: '빌드 플랫폼'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - macos
          - windows
          - linux
      release_type:
        description: '릴리스 타입'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release

jobs:
  build-tauri:
    # 권한 설정 추가
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:          
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            target: 'aarch64-apple-darwin'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            target: 'x86_64-apple-darwin'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            target: 'linux'
            args: ''
          - platform: 'windows-latest'
            target: 'windows'
            args: ''
        
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          
      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      # 리눅스 종속성 설치
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: npm install

      # 앱 버전 가져오기
      - name: Get app version
        id: get_version
        shell: bash
        run: |
          APP_VERSION=$(node -p "require('./package.json').version")
          APP_NAME=$(node -p "require('./package.json').name")
          echo "version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "name=$APP_NAME" >> $GITHUB_OUTPUT

      # Tauri 앱 빌드
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
         
      # 실행 파일 경로 출력 (디버깅 용도)
      - name: List build output
        shell: bash
        run: |
          echo "===== Build output files ====="
          if [ "${{ matrix.platform }}" = "macos-latest" ]; then
            if [[ "${{ matrix.target }}" == *"apple"* ]]; then
              find src-tauri/target/${{ matrix.target }}/release/bundle -type f -name "*.dmg" -o -name "*.app.tar.gz"
            fi
          elif [ "${{ matrix.platform }}" = "windows-latest" ]; then
            find src-tauri/target/release/bundle -type f -name "*.msi" -o -name "*.exe" | grep -v "node_modules"
          else
            find src-tauri/target/release/bundle -type f -name "*.deb" -o -name "*.AppImage"
          fi

      # 실행 파일 직접 업로드 (macOS ARM)
      - name: Upload macOS ARM binary
        if: matrix.platform == 'macos-latest' && matrix.target == 'aarch64-apple-darwin'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get_version.outputs.name }}_${{ steps.get_version.outputs.version }}_arm64.dmg
          if-no-files-found: error
          path: src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg
          compression-level: 0  # 압축 없음

      # 실행 파일 직접 업로드 (macOS Intel)
      - name: Upload macOS Intel binary
        if: matrix.platform == 'macos-latest' && matrix.target == 'x86_64-apple-darwin'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get_version.outputs.name }}_${{ steps.get_version.outputs.version }}_x64.dmg
          if-no-files-found: error
          path: src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg
          compression-level: 0  # 압축 없음

      # 실행 파일 직접 업로드 (Windows)
      - name: Upload Windows binary
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get_version.outputs.name }}_${{ steps.get_version.outputs.version }}_windows_x64.msi
          if-no-files-found: error
          path: src-tauri/target/release/bundle/msi/*.msi
          compression-level: 0  # 압축 없음

      # 실행 파일 직접 업로드 (Linux)
      - name: Upload Linux binary
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get_version.outputs.name }}_${{ steps.get_version.outputs.version }}_linux_amd64.deb
          if-no-files-found: error
          path: src-tauri/target/release/bundle/deb/*.deb
          compression-level: 0  # 압축 없음

      # AppImage 업로드 (Linux)
      - name: Upload Linux AppImage
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get_version.outputs.name }}_${{ steps.get_version.outputs.version }}_linux_amd64.AppImage
          if-no-files-found: warn # AppImage가 없을 수도 있음
          path: src-tauri/target/release/bundle/appimage/*.AppImage
          compression-level: 0  # 압축 없음